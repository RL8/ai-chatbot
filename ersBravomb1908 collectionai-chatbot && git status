[1mdiff --git a/app/(chat)/layout.tsx b/app/(chat)/layout.tsx[m
[1mindex c5dfb6b..bdf1e10 100644[m
[1m--- a/app/(chat)/layout.tsx[m
[1m+++ b/app/(chat)/layout.tsx[m
[36m@@ -5,7 +5,7 @@[m [mimport { SidebarInset, SidebarProvider } from '@/components/ui/sidebar';[m
 import { auth } from '../(auth)/auth';[m
 import { DataStreamProvider } from '@/components/data-stream-provider';[m
 [m
[31m-// PPR removed - not supported in Next.js 14.2.5[m
[32m+[m[32mexport const experimental_ppr = true;[m
 [m
 export default async function Layout({[m
   children,[m
[1mdiff --git a/app/layout.tsx b/app/layout.tsx[m
[1mindex 411f595..cae6b52 100644[m
[1m--- a/app/layout.tsx[m
[1m+++ b/app/layout.tsx[m
[36m@@ -20,16 +20,12 @@[m [mexport const viewport = {[m
 const geist = Geist({[m
   subsets: ['latin'],[m
   display: 'swap',[m
[31m-  preload: true,[m
[31m-  fallback: ['system-ui', 'arial'],[m
   variable: '--font-geist',[m
 });[m
 [m
 const geistMono = Geist_Mono({[m
   subsets: ['latin'],[m
   display: 'swap',[m
[31m-  preload: true,[m
[31m-  fallback: ['ui-monospace', 'monospace'],[m
   variable: '--font-geist-mono',[m
 });[m
 [m
[1mdiff --git a/components/music/AlbumGrid.tsx b/components/music/AlbumGrid.tsx[m
[1mindex ee8a742..12bcabb 100644[m
[1m--- a/components/music/AlbumGrid.tsx[m
[1m+++ b/components/music/AlbumGrid.tsx[m
[36m@@ -5,10 +5,6 @@[m [mimport { motion } from "framer-motion";[m
 import { Album } from "@/types/music";[m
 import { useMusicContext } from "@/context/MusicContext";[m
 import { Card, CardContent } from "@/components/ui/card";[m
[31m-import { Button } from "@/components/ui/button";[m
[31m-import { Trophy } from "lucide-react";[m
[31m-import { useRanking } from "@/hooks/use-ranking";[m
[31m-import { SortToggle } from "./SortToggle";[m
 [m
 interface AlbumGridProps {[m
   albums: Album[];[m
[36m@@ -17,43 +13,12 @@[m [minterface AlbumGridProps {[m
 [m
 export const AlbumGrid: React.FC<AlbumGridProps> = ({ albums, onAlbumClick }) => {[m
   const { selectAlbum } = useMusicContext();[m
[31m-  const { [m
[31m-    isRankingMode, [m
[31m-    toggleRankingMode, [m
[31m-    toggleRank, [m
[31m-    getItemRank, [m
[31m-    sortMode, [m
[31m-    setSortMode [m
[31m-  } = useRanking();[m
 [m
   const handleAlbumClick = (album: Album, index: number) => {[m
[31m-    if (isRankingMode) {[m
[31m-      toggleRank(album.id, 'album');[m
[31m-    } else {[m
[31m-      selectAlbum(album);[m
[31m-      onAlbumClick?.(album, index);[m
[31m-    }[m
[32m+[m[32m    selectAlbum(album);[m
[32m+[m[32m    onAlbumClick?.(album, index);[m
   };[m
 [m
[31m-  // Sort albums based on current sort mode[m
[31m-  const sortedAlbums = React.useMemo(() => {[m
[31m-    if (sortMode === 'ranking') {[m
[31m-      // Sort by ranking first, then by release date for unranked[m
[31m-      return [...albums].sort((a, b) => {[m
[31m-        const rankA = getItemRank(a.id, 'album');[m
[31m-        const rankB = getItemRank(b.id, 'album');[m
[31m-        [m
[31m-        if (rankA && rankB) return rankA - rankB;[m
[31m-        if (rankA) return -1; // ranked items first[m
[31m-        if (rankB) return 1;[m
[31m-        return a.releaseYear - b.releaseYear; // unranked by release date[m
[31m-      });[m
[31m-    } else {[m
[31m-      // Sort by release date (default)[m
[31m-      return [...albums].sort((a, b) => a.releaseYear - b.releaseYear);[m
[31m-    }[m
[31m-  }, [albums, sortMode, getItemRank]);[m
[31m-[m
   // Animation variants for staggered album grid[m
   const containerVariants = {[m
     hidden: { opacity: 0 },[m
[36m@@ -87,46 +52,14 @@[m [mexport const AlbumGrid: React.FC<AlbumGridProps> = ({ albums, onAlbumClick }) =>[m
 [m
   return ([m
     <div className="flex h-full flex-col mobile-container">[m
[31m-      {/* Header with sort toggle and ranking mode */}[m
[31m-      <div className="flex items-center justify-between mb-4 sm:mb-6">[m
[31m-        <motion.h2 [m
[31m-          className="text-xl sm:text-2xl font-bold text-gray-900 dark:text-white"[m
[31m-          initial={{ opacity: 0, y: -20 }}[m
[31m-          animate={{ opacity: 1, y: 0 }}[m
[31m-          transition={{ type: "spring", stiffness: 400, damping: 30 }}[m
[31m-        >[m
[31m-          Albums[m
[31m-        </motion.h2>[m
[31m-        [m
[31m-        <div className="flex items-center gap-2">[m
[31m-          <SortToggle [m
[31m-            sortMode={sortMode} [m
[31m-            onSortModeChange={setSortMode}[m
[31m-          />[m
[31m-          <Button[m
[31m-            variant={isRankingMode ? "default" : "outline"}[m
[31m-            size="sm"[m
[31m-            onClick={toggleRankingMode}[m
[31m-            className="flex items-center gap-2"[m
[31m-          >[m
[31m-            <Trophy className="w-4 h-4" />[m
[31m-            {isRankingMode ? "Exit Ranking" : "Rank Albums"}[m
[31m-          </Button>[m
[31m-        </div>[m
[31m-      </div>[m
[31m-[m
[31m-      {/* Ranking mode indicator */}[m
[31m-      {isRankingMode && ([m
[31m-        <motion.div[m
[31m-          initial={{ opacity: 0, y: -10 }}[m
[31m-          animate={{ opacity: 1, y: 0 }}[m
[31m-          className="mb-4 p-3 bg-blue-50 dark:bg-blue-950/20 border border-blue-200 dark:border-blue-800 rounded-lg"[m
[31m-        >[m
[31m-          <p className="text-sm text-blue-800 dark:text-blue-200">[m
[31m-            ðŸ’¡ Tap albums to rank them. Tap again to remove ranking.[m
[31m-          </p>[m
[31m-        </motion.div>[m
[31m-      )}[m
[32m+[m[32m      <motion.h2[m[41m [m
[32m+[m[32m        className="mb-4 sm:mb-6 text-center text-xl sm:text-2xl font-bold text-gray-900 dark:text-white"[m
[32m+[m[32m        initial={{ opacity: 0, y: -20 }}[m
[32m+[m[32m        animate={{ opacity: 1, y: 0 }}[m
[32m+[m[32m        transition={{ type: "spring", stiffness: 400, damping: 30 }}[m
[32m+[m[32m      >[m
[32m+[m[32m        Albums[m
[32m+[m[32m      </motion.h2>[m
 [m
       <motion.div [m
         className="grid flex-1 grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-3 sm:gap-4 auto-rows-fr"[m
[36m@@ -134,51 +67,32 @@[m [mexport const AlbumGrid: React.FC<AlbumGridProps> = ({ albums, onAlbumClick }) =>[m
         initial="hidden"[m
         animate="visible"[m
       >[m
[31m-        {sortedAlbums.map((album, index) => {[m
[31m-          const rank = getItemRank(album.id, 'album');[m
[31m-          const isRanked = rank !== undefined;[m
[31m-          [m
[31m-          return ([m
[31m-            <motion.div[m
[31m-              key={album.id}[m
[31m-              variants={albumVariants}[m
[31m-              whileHover={{ scale: 1.05, y: -5 }}[m
[31m-              whileTap={{ scale: 0.95 }}[m
[32m+[m[32m        {albums.map((album, index) => ([m
[32m+[m[32m          <motion.div[m
[32m+[m[32m            key={album.id}[m
[32m+[m[32m            variants={albumVariants}[m
[32m+[m[32m            whileHover={{ scale: 1.05, y: -5 }}[m
[32m+[m[32m            whileTap={{ scale: 0.95 }}[m
[32m+[m[32m          >[m
[32m+[m[32m            <Card[m
[32m+[m[32m              className="cursor-pointer touch-target h-full"[m
[32m+[m[32m              style={{[m
[32m+[m[32m                borderColor: album.color,[m
[32m+[m[32m                borderWidth: "2px",[m
[32m+[m[32m              }}[m
[32m+[m[32m              onClick={() => handleAlbumClick(album, index)}[m
             >[m
[31m-              <Card[m
[31m-                className={`cursor-pointer touch-target h-full transition-all duration-200 ${[m
[31m-                  isRankingMode [m
[31m-                    ? isRanked [m
[31m-                      ? 'ring-2 ring-blue-500 shadow-lg' [m
[31m-                      : 'opacity-60'[m
[31m-                    : ''[m
[31m-                }`}[m
[31m-                style={{[m
[31m-                  borderColor: album.color,[m
[31m-                  borderWidth: "2px",[m
[31m-                  opacity: isRankingMode && !isRanked ? 0.6 : 1,[m
[31m-                }}[m
[31m-                onClick={() => handleAlbumClick(album, index)}[m
[31m-              >[m
[31m-                <CardContent className="flex h-full flex-col justify-center p-3 sm:p-4 text-center relative">[m
[31m-                  {/* Ranking indicator */}[m
[31m-                  {isRanked && ([m
[31m-                    <div className="absolute -top-2 -right-2 w-6 h-6 bg-blue-500 text-white rounded-full flex items-center justify-center text-xs font-bold">[m
[31m-                      {rank}[m
[31m-                    </div>[m
[31m-                  )}[m
[31m-                  [m
[31m-                  <h3 className="mb-1 text-sm sm:text-base font-semibold text-gray-900 dark:text-white text-truncate-2">[m
[31m-                    {album.name}[m
[31m-                  </h3>[m
[31m-                  <p className="text-xs sm:text-sm text-gray-600 dark:text-gray-400">[m
[31m-                    {album.releaseYear}[m
[31m-                  </p>[m
[31m-                </CardContent>[m
[31m-              </Card>[m
[31m-            </motion.div>[m
[31m-          );[m
[31m-        })}[m
[32m+[m[32m              <CardContent className="flex h-full flex-col justify-center p-3 sm:p-4 text-center">[m
[32m+[m[32m                <h3 className="mb-1 text-sm sm:text-base font-semibold text-gray-900 dark:text-white text-truncate-2">[m
[32m+[m[32m                  {album.name}[m
[32m+[m[32m                </h3>[m
[32m+[m[32m                <p className="text-xs sm:text-sm text-gray-600 dark:text-gray-400">[m
[32m+[m[32m                  {album.releaseYear}[m
[32m+[m[32m                </p>[m
[32m+[m[32m              </CardContent>[m
[32m+[m[32m            </Card>[m
[32m+[m[32m          </motion.div>[m
[32m+[m[32m        ))}[m
       </motion.div>[m
     </div>[m
   );[m
[1mdiff --git a/components/music/AlbumTabs.tsx b/components/music/AlbumTabs.tsx[m
[1mdeleted file mode 100644[m
[1mindex b3a83ed..0000000[m
[1m--- a/components/music/AlbumTabs.tsx[m
[1m+++ /dev/null[m
[36m@@ -1,151 +0,0 @@[m
[31m-"use client";[m
[31m-[m
[31m-import React, { useRef, useEffect, useState } from "react";[m
[31m-import { cn } from "@/lib/utils";[m
[31m-import { Album } from "@/types/music";[m
[31m-import { ChevronLeft, ChevronRight } from "lucide-react";[m
[31m-import { Button } from "@/components/ui/button";[m
[31m-[m
[31m-interface AlbumTabsProps {[m
[31m-  albums: Album[];[m
[31m-  currentAlbumIndex: number;[m
[31m-  onAlbumClick: (album: Album, index: number) => void;[m
[31m-  className?: string;[m
[31m-}[m
[31m-[m
[31m-export function AlbumTabs({ [m
[31m-  albums, [m
[31m-  currentAlbumIndex, [m
[31m-  onAlbumClick, [m
[31m-  className [m
[31m-}: AlbumTabsProps) {[m
[31m-  const scrollContainerRef = useRef<HTMLDivElement>(null);[m
[31m-  const [showLeftArrow, setShowLeftArrow] = useState(false);[m
[31m-  const [showRightArrow, setShowRightArrow] = useState(false);[m
[31m-[m
[31m-  // Check scroll position to show/hide arrows[m
[31m-  const checkScrollPosition = () => {[m
[31m-    if (!scrollContainerRef.current) return;[m
[31m-    [m
[31m-    const { scrollLeft, scrollWidth, clientWidth } = scrollContainerRef.current;[m
[31m-    setShowLeftArrow(scrollLeft > 0);[m
[31m-    setShowRightArrow(scrollLeft < scrollWidth - clientWidth - 1);[m
[31m-  };[m
[31m-[m
[31m-  // Scroll to specific album[m
[31m-  const scrollToAlbum = (index: number) => {[m
[31m-    if (!scrollContainerRef.current) return;[m
[31m-    [m
[31m-    const container = scrollContainerRef.current;[m
[31m-    const albumElement = container.children[index] as HTMLElement;[m
[31m-    if (!albumElement) return;[m
[31m-[m
[31m-    const containerWidth = container.clientWidth;[m
[31m-    const albumWidth = albumElement.offsetWidth;[m
[31m-    const albumLeft = albumElement.offsetLeft;[m
[31m-    const scrollLeft = albumLeft - (containerWidth / 2) + (albumWidth / 2);[m
[31m-    [m
[31m-    container.scrollTo({[m
[31m-      left: Math.max(0, scrollLeft),[m
[31m-      behavior: 'smooth'[m
[31m-    });[m
[31m-  };[m
[31m-[m
[31m-  // Scroll by direction[m
[31m-  const scrollBy = (direction: 'left' | 'right') => {[m
[31m-    if (!scrollContainerRef.current) return;[m
[31m-    [m
[31m-    const container = scrollContainerRef.current;[m
[31m-    const scrollAmount = container.clientWidth * 0.8;[m
[31m-    [m
[31m-    container.scrollBy({[m
[31m-      left: direction === 'left' ? -scrollAmount : scrollAmount,[m
[31m-      behavior: 'smooth'[m
[31m-    });[m
[31m-  };[m
[31m-[m
[31m-  // Auto-scroll to current album when it changes[m
[31m-  useEffect(() => {[m
[31m-    scrollToAlbum(currentAlbumIndex);[m
[31m-  }, [currentAlbumIndex]);[m
[31m-[m
[31m-  // Check scroll position on mount and resize[m
[31m-  useEffect(() => {[m
[31m-    checkScrollPosition();[m
[31m-    window.addEventListener('resize', checkScrollPosition);[m
[31m-    return () => window.removeEventListener('resize', checkScrollPosition);[m
[31m-  }, []);[m
[31m-[m
[31m-  return ([m
[31m-    <div className={cn("relative", className)}>[m
[31m-      {/* Left Arrow */}[m
[31m-      {showLeftArrow && ([m
[31m-        <Button[m
[31m-          variant="ghost"[m
[31m-          size="sm"[m
[31m-          className="absolute left-0 top-1/2 -translate-y-1/2 z-10 h-8 w-8 p-0 bg-background/80 backdrop-blur border border-border shadow-sm"[m
[31m-          onClick={() => scrollBy('left')}[m
[31m-        >[m
[31m-          <ChevronLeft className="h-4 w-4" />[m
[31m-        </Button>[m
[31m-      )}[m
[31m-[m
[31m-      {/* Right Arrow */}[m
[31m-      {showRightArrow && ([m
[31m-        <Button[m
[31m-          variant="ghost"[m
[31m-          size="sm"[m
[31m-          className="absolute right-0 top-1/2 -translate-y-1/2 z-10 h-8 w-8 p-0 bg-background/80 backdrop-blur border border-border shadow-sm"[m
[31m-          onClick={() => scrollBy('right')}[m
[31m-        >[m
[31m-          <ChevronRight className="h-4 w-4" />[m
[31m-        </Button>[m
[31m-      )}[m
[31m-[m
[31m-      {/* Scrollable Container */}[m
[31m-      <div[m
[31m-        ref={scrollContainerRef}[m
[31m-        className="flex gap-2 scroll-horizontal px-4 py-2"[m
[31m-        onScroll={checkScrollPosition}[m
[31m-        aria-label="Albums"[m
[31m-      >[m
[31m-        {albums.map((album, index) => ([m
[31m-          <button[m
[31m-            key={album.id}[m
[31m-            onClick={() => onAlbumClick(album, index)}[m
[31m-            className={cn([m
[31m-              "px-3 py-1 rounded-full text-sm font-medium whitespace-nowrap transition-all flex-shrink-0 touch-target",[m
[31m-              currentAlbumIndex === index[m
[31m-                ? "text-white shadow-md"[m
[31m-                : "text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white"[m
[31m-            )}[m
[31m-            style={{[m
[31m-              backgroundColor: currentAlbumIndex === index ? album.color : 'transparent',[m
[31m-              border: currentAlbumIndex === index ? `2px solid ${album.color}` : '2px solid transparent'[m
[31m-            }}[m
[31m-            aria-current={currentAlbumIndex === index ? "page" : undefined}[m
[31m-          >[m
[31m-            {album.name}[m
[31m-          </button>[m
[31m-        ))}[m
[31m-      </div>[m
[31m-[m
[31m-      {/* Pagination Dots */}[m
[31m-      <div className="flex justify-center gap-1 mt-2">[m
[31m-        {albums.map((_, index) => ([m
[31m-          <button[m
[31m-            key={index}[m
[31m-            onClick={() => scrollToAlbum(index)}[m
[31m-            className={cn([m
[31m-              "w-2 h-2 rounded-full transition-all",[m
[31m-              currentAlbumIndex === index[m
[31m-                ? "bg-primary"[m
[31m-                : "bg-gray-300 dark:bg-gray-600 hover:bg-gray-400 dark:hover:bg-gray-500"[m
[31m-            )}[m
[31m-            aria-label={`Go to album ${index + 1}`}[m
[31m-          />[m
[31m-        ))}[m
[31m-      </div>[m
[31m-    </div>[m
[31m-  );[m
[31m-}[m
[1mdiff --git a/components/music/SongPills.tsx b/components/music/SongPills.tsx[m
[1mindex 9ce468d..4940e74 100644[m
[1m--- a/components/music/SongPills.tsx[m
[1m+++ b/components/music/SongPills.tsx[m
[36m@@ -4,10 +4,6 @@[m [mimport React from "react";[m
 import { motion } from "framer-motion";[m
 import { Song } from "@/types/music";[m
 import { useMusicContext } from "@/context/MusicContext";[m
[31m-import { Button } from "@/components/ui/button";[m
[31m-import { Trophy } from "lucide-react";[m
[31m-import { useRanking } from "@/hooks/use-ranking";[m
[31m-import { SortToggle } from "./SortToggle";[m
 [m
 interface SongPillsProps {[m
   songs: Song[];[m
[36m@@ -23,43 +19,12 @@[m [mexport const SongPills: React.FC<SongPillsProps> = ({[m
   onSongClick,[m
 }) => {[m
   const { selectSong } = useMusicContext();[m
[31m-  const { [m
[31m-    isRankingMode, [m
[31m-    toggleRankingMode, [m
[31m-    toggleRank, [m
[31m-    getItemRank, [m
[31m-    sortMode, [m
[31m-    setSortMode [m
[31m-  } = useRanking();[m
 [m
   const handleSongClick = (song: Song, index: number) => {[m
[31m-    if (isRankingMode) {[m
[31m-      toggleRank(song.id, 'song');[m
[31m-    } else {[m
[31m-      selectSong(song);[m
[31m-      onSongClick?.(song, index);[m
[31m-    }[m
[32m+[m[32m    selectSong(song);[m
[32m+[m[32m    onSongClick?.(song, index);[m
   };[m
 [m
[31m-  // Sort songs based on current sort mode[m
[31m-  const sortedSongs = React.useMemo(() => {[m
[31m-    if (sortMode === 'ranking') {[m
[31m-      // Sort by ranking first, then by track number for unranked[m
[31m-      return [...songs].sort((a, b) => {[m
[31m-        const rankA = getItemRank(a.id, 'song');[m
[31m-        const rankB = getItemRank(b.id, 'song');[m
[31m-        [m
[31m-        if (rankA && rankB) return rankA - rankB;[m
[31m-        if (rankA) return -1; // ranked items first[m
[31m-        if (rankB) return 1;[m
[31m-        return a.trackNumber - b.trackNumber; // unranked by track number[m
[31m-      });[m
[31m-    } else {[m
[31m-      // Sort by track number (default)[m
[31m-      return [...songs].sort((a, b) => a.trackNumber - b.trackNumber);[m
[31m-    }[m
[31m-  }, [songs, sortMode, getItemRank]);[m
[31m-[m
   // Animation variants for staggered song pills[m
   const containerVariants = {[m
     hidden: { opacity: 0 },[m
[36m@@ -93,46 +58,14 @@[m [mexport const SongPills: React.FC<SongPillsProps> = ({[m
 [m
   return ([m
     <div className="flex h-full flex-col mobile-container">[m
[31m-      {/* Header with sort toggle and ranking mode */}[m
[31m-      <div className="flex items-center justify-between mb-4 px-4">[m
[31m-        <motion.h2 [m
[31m-          className="text-lg sm:text-xl font-bold text-gray-900 dark:text-white"[m
[31m-          initial={{ opacity: 0, y: -20 }}[m
[31m-          animate={{ opacity: 1, y: 0 }}[m
[31m-          transition={{ type: "spring", stiffness: 400, damping: 30 }}[m
[31m-        >[m
[31m-          {albumName}[m
[31m-        </motion.h2>[m
[31m-        [m
[31m-        <div className="flex items-center gap-2">[m
[31m-          <SortToggle [m
[31m-            sortMode={sortMode} [m
[31m-            onSortModeChange={setSortMode}[m
[31m-          />[m
[31m-          <Button[m
[31m-            variant={isRankingMode ? "default" : "outline"}[m
[31m-            size="sm"[m
[31m-            onClick={toggleRankingMode}[m
[31m-            className="flex items-center gap-2"[m
[31m-          >[m
[31m-            <Trophy className="w-4 h-4" />[m
[31m-            {isRankingMode ? "Exit Ranking" : "Rank Songs"}[m
[31m-          </Button>[m
[31m-        </div>[m
[31m-      </div>[m
[31m-[m
[31m-      {/* Ran